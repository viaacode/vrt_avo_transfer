<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:quartz="http://www.mulesoft.org/schema/mule/quartz" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml" xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:context="http://www.springframework.org/schema/context" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-current.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/quartz http://www.mulesoft.org/schema/mule/quartz/current/mule-quartz.xsd">
    <http:listener-config name="HTTP_Listener_Configuration" host="0.0.0.0" port="${http.port}" doc:name="HTTP Listener Configuration"/>
    <context:property-placeholder location="${mule.env}.properties"/>
    <db:generic-config name="PostgreSQL_CONNECTION" url="jdbc:postgresql://${db.host}:${db.port}/${db.database}?password=${db.password}&amp;user=${db.username}" driverClassName="org.postgresql.Driver" doc:name="Generic Database Configuration"> 
        <reconnect></reconnect>  
    </db:generic-config>
    <quartz:connector name="Quartz1" validateConnections="true" doc:name="Quartz"/>
    <http:request-config name="HTTP_Skryv_OAUTH" host="${skryv.oauth_host}" port="443" responseTimeout="5000" doc:name="HTTP Request Configuration" protocol="HTTPS" connectionIdleTimeout="5000">
    </http:request-config>
    <http:request-config name="Skryv_API" protocol="HTTPS" host="${skryv.api_host}" port="443" doc:name="HTTP Request Configuration" responseTimeout="5000" connectionIdleTimeout="5000" basePath="/">
        <http:proxy host="${proxy.host}" port="80"/>
    </http:request-config>
    <flow name="vrt_avo_transferFlow">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/briefings/*" allowedMethods="GET, POST, DELETE" doc:name="/briefings/*"/>
        <choice doc:name="Check which HTTP method is used">
            <when expression="#[message.inboundProperties.'http.method' == 'POST']">
                <logger level="INFO" doc:name="POST" message="POST"/>
                <json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to Object"/>
                <set-variable variableName="briefing_id" value="#[message.inboundProperties.'http.request.uri'.substring(message.inboundProperties.'http.request.uri'.lastIndexOf('/')+1)]" doc:name="Set briefing_id (prefer to take from URI)"/>
                <set-variable variableName="briefing_titel" value="#[payload['briefing_titel']]" doc:name="Set briefing_titel"/>
                <set-variable variableName="media_ids" value="#[payload['media_ids']]" doc:name="Set media_ids"/>
                <set-variable variableName="uitvoerder" value="#[payload['uitvoerder']]" doc:name="Set uitvoerder"/>
                <set-variable variableName="toegevoegd_door" value="#[payload['toegevoegd_door']]" doc:name="Set toegevoegd_door"/>
                <set-variable variableName="reception_date" value="#[Calendar.getInstance().time]" doc:name="Set reception_date"/>
                <set-variable variableName="bulkInsert" value="#[[]]" doc:name="Set bulkInsert"/>
                <db:update config-ref="PostgreSQL_CONNECTION" doc:name="Set status of previous briefing version DELETED">
                    <db:parameterized-query><![CDATA[UPDATE ${db.avo_transfer}
SET status = 'DELETED'
where briefing_id = #[flowVars.briefing_id]]]></db:parameterized-query>
                </db:update>
                <foreach collection="#[flowVars.media_ids]" doc:name="For Each media id">
                    <choice doc:name="Is media type video?">
                        <when expression="#[payload.media_type.equals(&quot;video&quot;)]">
                            <logger message="Add openOT and closedOT as well" level="INFO" doc:name="Yes - Add openOT and closedOT as well"/>
                            <expression-component doc:name="Add video with status QUEUED"><![CDATA[#[flowVars.bulkInsert.add([flowVars.briefing_id, payload.media_id, payload.media_type, 'QUEUED', flowVars.uitvoerder, flowVars.toegevoegd_door, flowVars.reception_date, flowVars.briefing_titel])]]]></expression-component>
                            <expression-component doc:name="Add openOt"><![CDATA[#[flowVars.bulkInsert.add([flowVars.briefing_id, payload.media_id, 'openOt', 'QUEUED', flowVars.uitvoerder, flowVars.toegevoegd_door, flowVars.reception_date, flowVars.briefing_titel])]]]></expression-component>
                            <expression-component doc:name="Add closedOt"><![CDATA[#[flowVars.bulkInsert.add([flowVars.briefing_id, payload.media_id, 'closedOt', 'QUEUED', flowVars.uitvoerder, flowVars.toegevoegd_door, flowVars.reception_date, flowVars.briefing_titel])]]]></expression-component>
                        </when>
                        <otherwise>
                            <logger message="No - Don't add openOT and closedOT" level="INFO" doc:name="No - Don't add openOT and closedOT"/>
                            <expression-component doc:name="Add new entry to bulkInsert with status QUEUED"><![CDATA[#[flowVars.bulkInsert.add([flowVars.briefing_id, payload.media_id, payload.media_type, 'QUEUED', flowVars.uitvoerder, flowVars.toegevoegd_door, flowVars.reception_date, flowVars.briefing_titel])]]]></expression-component>
                        </otherwise>
                    </choice>
                    <set-variable variableName="media_type" value="#[payload.media_type]" doc:name="Set media_type"/>
                    <set-variable variableName="media_id" value="#[payload.media_id]" doc:name="Set media_id"/>
                    <set-variable variableName="status" value="#['QUEUED']" doc:name="Set status (QUEUED)"/>
                    <async doc:name="Async">
                        <flow-ref name="log_elastic_search" doc:name="log_elastic_search"/>
                    </async>
                </foreach>
                <set-payload value="#[flowVars.bulkInsert]" doc:name="Set Payload with bulkInsert"/>
                <db:insert config-ref="PostgreSQL_CONNECTION" bulkMode="true" doc:name="Bulk insert new briefing into vrt_avo_transfer">
                    <db:parameterized-query><![CDATA[INSERT INTO ${db.avo_transfer} (
	briefing_id,
	media_id,
	media_type,
	status,
	uitvoerder,
	toegevoegd_door,
	reception_date,
	briefing_titel
)
VALUES(
	#[payload[0]],
	#[payload[1]],
	#[payload[2]],
	#[payload[3]],
	#[payload[4]],
	#[payload[5]],
	now(),
	#[payload[7]]
	)]]></db:parameterized-query>
                </db:insert>
                <logger message="Briefing_id #[flowVars.briefing_id] has been added with media_ids: #[flowVars.media_ids] (contact person: #[flowVars.email])" level="INFO" doc:name="Add media_id with briefing_id"/>
                <dw:transform-message doc:name="Build response JSON">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	"message": "Succesvol toegevoegd!"
}]]></dw:set-payload>
                </dw:transform-message>
            </when>
            <otherwise>
                <logger message="GET" level="INFO" doc:name="GET"/>
                <expression-component doc:name="TODO: filter out the briefings that are completed"><![CDATA[// Do nothing]]></expression-component>
                <set-variable variableName="briefing_id" value="#[message.inboundProperties.'http.request.uri'.substring(message.inboundProperties.'http.request.uri'.lastIndexOf('/')+1)]" doc:name="Set briefing_id"/>
                <choice doc:name="Briefing ID given?">
                	<when expression="#[flowVars.briefing_id.equals('briefings')||flowVars.briefing_id.equals('')]">
                		<db:select config-ref="PostgreSQL_CONNECTION" doc:name="Get all briefings that are not DELETED">
                            <db:parameterized-query><![CDATA[select *
from ${db.avo_transfer}
where status != 'DELETED' and (media_type = 'video' or media_type = 'audio')]]></db:parameterized-query>
                        </db:select>
                        <choice doc:name="Briefings found?">
                            <when expression="#[payload.size() == 0]">
                                <dw:transform-message doc:name="Briefings is empty">
                                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	"briefings": []
}]]></dw:set-payload>
                                </dw:transform-message>
                            </when>
                            <otherwise>
                                <dw:transform-message doc:name="Transform Message">
                                    <dw:input-payload doc:sample="sample_data/list_map.dwl"/>
                                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
%var groupedBriefings = (payload as :array) groupBy $.briefing_id
%var distinctBriefingIds = (payload.briefing_id as :array) distinctBy $
%function getGroupedStatussen(briefingId) (groupedBriefings[briefingId]) groupBy $.status
---
{
	"briefings": distinctBriefingIds map (
		{
			briefing_id: groupedBriefings[$][0].briefing_id,
			briefing_titel: groupedBriefings[$][0].briefing_titel,
			reception_date: groupedBriefings[$][0].reception_date,
			uitvoerder: groupedBriefings[$][0].uitvoerder,
			toegevoegd_door: groupedBriefings[$][0].toegevoegd_door,
			aantal_bezig: (sizeOf groupedBriefings[$]) when getGroupedStatussen($)['RECONCILED'] == null 
				otherwise (sizeOf groupedBriefings[$]) - (sizeOf (getGroupedStatussen($)['RECONCILED'] as :array)),
			totaal: sizeOf groupedBriefings[$],
			klaar: (false when (getGroupedStatussen($)['RECONCILED'] == null) 
				otherwise (
					false when ((sizeOf groupedBriefings[$]) - (sizeOf groupedBriefings[$]) - (sizeOf (getGroupedStatussen($)['RECONCILED'] as :array))) > 0
					otherwise true)),
			media_ids: groupedBriefings[$] map (
				{
					media_id: $.media_id,
					media_type: $.media_type,
					status: $.status	
				}
			)	
		}
	)
}]]></dw:set-payload>
                                </dw:transform-message>
                            </otherwise>
                        </choice>
                        <byte-array-to-string-transformer doc:name="Byte Array to String"/>
                	</when>
                    <otherwise>
                        <db:select config-ref="PostgreSQL_CONNECTION" doc:name="Get briefing">
                            <db:parameterized-query><![CDATA[select *
from ${db.avo_transfer}
where briefing_id = #[flowVars.briefing_id] and status != 'DELETED']]></db:parameterized-query>
                        </db:select>
                        <dw:transform-message doc:name="Transform Message">
                            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
%var groupedBriefings = (payload as :array) groupBy flowVars.briefing_id
%var groupedStatussen = (payload as :array) groupBy $.status
---
{
	briefing_id: groupedBriefings[flowVars.briefing_id][0].briefing_id,
	briefing_titel: groupedBriefings[flowVars.briefing_id][0].briefing_titel,
	reception_date: groupedBriefings[flowVars.briefing_id][0].reception_date,
	uitvoerder: groupedBriefings[flowVars.briefing_id][0].uitvoerder,
	toegevoegd_door: groupedBriefings[flowVars.briefing_id][0].toegevoegd_door,
	aantal_bezig: (sizeOf groupedBriefings[0]) - (sizeOf groupedStatussen['RECONCILED']),
	totaal: sizeOf groupedBriefings[0],
	klaar: false when ((sizeOf groupedBriefings[0]) - (sizeOf groupedBriefings[0]) - (sizeOf groupedStatussen['RECONCILED'])) > 0
		otherwise true,
	media_ids: groupedBriefings[flowVars.briefing_id] map (
		{
			media_id: $.media_id,
			media_type: $.media_type,
			status: $.status	
		}
	)	
}]]></dw:set-payload>
                        </dw:transform-message>
                        <byte-array-to-string-transformer doc:name="Byte Array to String"/>
                    </otherwise>
                </choice>
                <json:object-to-json-transformer doc:name="Object to JSON"/>
            </otherwise>
        </choice>
        <catch-exception-strategy doc:name="Catch Exception Strategy">
            <logger message="500: BRIEFING NOT ADDED #[flowVars.briefing_id]" level="INFO" doc:name="500: BRIEFING NOT ADDED"/>
            <dw:transform-message doc:name="Transform Message">
                <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	"error": "briefing not found",
	"code": "500"
}]]></dw:set-payload>
            </dw:transform-message>
            <set-property propertyName="http.status" value="#[message.inboundProperties['http.status']]" doc:name="Set http status 500"/>
        </catch-exception-strategy>
    </flow>
    <flow name="briefing_apiFlow">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/briefings/subtitle" allowedMethods="POST" doc:name="HTTP"/>
        <json:json-to-object-transformer doc:name="JSON to Object"/>
    </flow>
    <flow name="validateBriefingIDAndReturnMediaIds" initialState="started">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/briefings/validate" allowedMethods="POST" doc:name="/briefings/validate"/>
        <json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to Object"/>
        <set-variable variableName="briefing_id" value="#[payload['briefing_id']]" doc:name="Set briefing_id to validate"/>
        <db:select config-ref="PostgreSQL_CONNECTION" doc:name="Retrieve access_token">
            <db:parameterized-query><![CDATA[select *
from ${db.skryv_token}
where id = 1]]></db:parameterized-query>
        </db:select>
        <set-variable variableName="access_token" value="#[payload[0].access_token]" doc:name="Set access_token"/>
        <logger message="Requesting Skryv document with access token" level="INFO" doc:name="Requesting Skryv document"/>
        <http:request config-ref="Skryv_API" path="/api/documents/#[flowVars.briefing_id]" method="GET" doc:name="Get briefing_ID from Skryv API" parseResponse="false">
            <http:request-builder>
                <http:header headerName="Authorization" value="Bearer #[flowVars.access_token]"/>
                <http:header headerName="Accept" value="application/json"/>
            </http:request-builder>
        </http:request>
        <json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to Object"/>
        <set-variable variableName="resp" value="#[payload]" doc:name="Set resp"/>
        <set-variable variableName="briefing_titel" value="#[flowVars.resp.document['value'].briefing_titel]" doc:name="Set briefing_titel"/>
        <set-variable variableName="datum" value="#[flowVars.resp.document['value'].finale_selectie_gemaakt_1.datum_6]" doc:name="Set datum"/>
        <set-variable variableName="uitvoerder" value="#[flowVars.resp.document['value'].finale_selectie_gemaakt_1.uitvoerder_4]" doc:name="Set uitvoerder"/>
        <set-variable variableName="videos" value="#[payload.document['value'].finale_selectie_gemaakt_1.lijst_mediaids_video != null ? payload.document['value'].finale_selectie_gemaakt_1.lijst_mediaids_video.toString() : &quot;&quot;]" doc:name="Set videos"/>
        <set-variable variableName="audios" value="#[payload.document['value'].finale_selectie_gemaakt_1.lijst_mediaids_audio != null ? payload.document['value'].finale_selectie_gemaakt_1.lijst_mediaids_audio.toString() : &quot;&quot;]" doc:name="Set audios"/>
        <logger message="Successfully got Skryvv document" level="INFO" doc:name="Success"/>
        <dw:transform-message doc:name="Fetch media_ids, email and briefing_titel">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	"briefing_id": flowVars.briefing_id,
	briefing_titel: flowVars.briefing_titel,
	datum: flowVars.datum,
	uitvoerder: flowVars.uitvoerder,
	media_ids_video: ((flowVars.videos splitBy "\n") map (
		{
			"media_id": trim $,
			"media_type": "video"
		}
	)) when flowVars.videos != "" otherwise [],
	media_ids_audio: ((flowVars.audios splitBy "\n") map (
		{
			"media_id": trim $,
			"media_type": "audio"
		}
	)) when flowVars.audios != "" otherwise []
}]]></dw:set-payload>
        </dw:transform-message>
        <byte-array-to-string-transformer doc:name="Byte Array to String"/>
        <catch-exception-strategy doc:name="Catch Exception Strategy">
            <logger message="500: BRIEFING NOT FOUND #[flowVars.briefing_id]" level="INFO" doc:name="500: BRIEFING NOT FOUND"/>
            <dw:transform-message doc:name="Transform Message">
                <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	"error": "briefing not found",
	"code": "500"
}]]></dw:set-payload>
            </dw:transform-message>
            <set-property propertyName="http.status" value="#[message.inboundProperties['http.status']]" doc:name="Set http status 500"/>
        </catch-exception-strategy>
    </flow>
    <flow name="FetchNewAccessTokenWithRefreshToken" >
        <quartz:inbound-endpoint jobName="PollerJob" repeatInterval="300000" responseTimeout="10000" doc:name="Quartz" connector-ref="Quartz1" startDelay="0">
            <quartz:event-generator-job/>
        </quartz:inbound-endpoint>
        <logger message="Requesting new access token" level="INFO" doc:name="Requesting new access token"/>
        <http:request config-ref="HTTP_Skryv_OAUTH" path="/oauth/token" method="POST" doc:name="Send POST to Skryv">
            <http:request-builder>
                <http:query-param paramName="client_id" value="${skryv.client_id}"/>
                <http:query-param paramName="client_secret" value="${skryv.client_secret}"/>
                <http:query-param paramName="grant_type" value="password"/>
                <http:query-param paramName="username" value="${skryv.username}"/>
                <http:query-param paramName="password" value="${skryv.password}"/>
            </http:request-builder>
        </http:request>
        <json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to Object"/>
        <set-variable variableName="access_token" value="#[payload['refresh_token']]" doc:name="Set access_token"/>
        <logger message="Received access token: #[flowVars.access_token]" level="INFO" doc:name="Received access token"/>
        <db:update config-ref="PostgreSQL_CONNECTION" doc:name="Save access_token">
            <db:parameterized-query><![CDATA[UPDATE ${db.skryv_token}
SET access_token = #[flowVars.access_token]
where id = 1]]></db:parameterized-query>
        </db:update>
        <catch-exception-strategy doc:name="Catch Exception Strategy">
            <logger message="Failed to retrieve access token" level="ERROR" doc:name="Failed to retrieve access token"/>
        </catch-exception-strategy>
    </flow>
</mule>
