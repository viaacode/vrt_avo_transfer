<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:ftp="http://www.mulesoft.org/schema/mule/ee/ftp" xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:amqp="http://www.mulesoft.org/schema/mule/amqp" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/amqp http://www.mulesoft.org/schema/mule/amqp/current/mule-amqp.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/ee/ftp http://www.mulesoft.org/schema/mule/ee/ftp/current/mule-ftp-ee.xsd">
	<amqp:connector name="amqp" validateConnections="true" host="${rabbit.host}" port="${rabbit.port}"  username="${rabbit.username}" password="${rabbit.password}" ackMode="MANUAL" prefetchCount="1" doc:name="AMQP-0-9 Connector"> 
        <reconnect-forever></reconnect-forever>  
    </amqp:connector>
    <flow name="pollerFlow">
        <amqp:inbound-endpoint queueName="vrt_avo_poller" numberOfChannels="1" responseTimeout="10000" exchange-pattern="request-response"  doc:name="Receive token from vrt_avo_poller" connector-ref="amqp"/>
        <db:select config-ref="PostgreSQL_CONNECTION" doc:name="Check for items that are QUEUED, PROCESSING or REQUESTED">
            <db:parameterized-query><![CDATA[select *
from ${db.avo_transfer}
where status = 'QUEUED' AND status = 'REQUESTED']]></db:parameterized-query>
        </db:select>
        <flow-ref name="SetInfo" doc:name="SetInfo"/>
        <foreach doc:name="For Each">
            <db:select config-ref="PostgreSQL_CONNECTION" doc:name="Retrieve info from vrt_message_buffer">
                <db:parameterized-query><![CDATA[select *
from ${db.buffer}
where media_id = #[payload['media_id']] 
	and event_name IN (select event_name
						from messageevents
						where file_type = #[flowVars.media_type]
					)
ORDER BY lastmodificationdate desc]]></db:parameterized-query>
            </db:select>
            <choice doc:name="Record found?">
                <when expression="#[payload.size()&gt;0]">
                    <set-variable variableName="buffer_status" value="#[payload['status']]" doc:name="Set buffer_status"/>
                    <set-variable variableName="correlation_id_buffer" value="#[payload[0].correlation_id]" doc:name="Set correlation_id_buffer"/>
                    <choice doc:name="What's the buffer status of the item?">
                        <when expression="#[flowVars.buffer_status.equals('failed')]">
                            <logger message="item failed to retrieve" level="INFO" doc:name="failed"/>
                            <choice doc:name="Are there retries left over?">
                                <when expression="#[flowVars.retry_count&lt;=0]">
                                    <logger level="INFO" doc:name="FINAL: No retries left, set status to FAILED"/>
                                    <db:update config-ref="PostgreSQL_CONNECTION" doc:name="Update status to FAILED">
                                        <db:parameterized-query><![CDATA[UPDATE ${db.avo_transfer}
SET status = 'FAILED'
where id = #[flowVars.id]]]></db:parameterized-query>
                                    </db:update>
                                </when>
                                <otherwise>
                                    <logger level="INFO" doc:name="If yes, reset the buffer status to ready_for_processing and avo status to REQUESTED back"/>
                                    <expression-component doc:name="Update retry_count - 1"><![CDATA[#[flowVars.retry_count--]]]></expression-component>
                                    <db:update config-ref="PostgreSQL_CONNECTION" doc:name="Update status of record in vrt_message_buffer to READY_FOR_PROCESSING">
                                        <db:parameterized-query><![CDATA[UPDATE ${db.buffer}
SET status = 'ready_for_processing'
WHERE id = #[flowVars.correlation_id_buffer]]]></db:parameterized-query>
                                    </db:update>
                                    <db:update config-ref="PostgreSQL_CONNECTION" doc:name="Update status vrt_avo_transfer to PROCESSING">
                                        <db:parameterized-query><![CDATA[UPDATE ${db.avo_transfer}
SET status = 'PROCESSING'
where id = #[flowVars.id]]]></db:parameterized-query>
                                    </db:update>
                                </otherwise>
                            </choice>
                        </when>
                        <when expression="#[flowVars.buffer_status.equals('permanently_failed')]">
                            <logger level="INFO" doc:name="permanently_failed"/>
                            <db:update config-ref="PostgreSQL_CONNECTION" doc:name="Update status vrt_avo_transfer to FAILED">
                                <db:parameterized-query><![CDATA[UPDATE ${db.avo_transfer}
SET status = 'FAILED'
where id = #[flowVars.id]]]></db:parameterized-query>
                            </db:update>
                        </when>
                        <when expression="#[flowVars.buffer_status.equals('completed')||flowVars.buffer_status.equals('awaitingMetadataUpdate24hr')||flowVars.buffer_status.equals('awaitingMetadataUpdate48hr')||flowVars.buffer_status.equals('awaitingMetadataUpdate7d')]">
                            <logger level="INFO" doc:name="ARCHIVED when status is awaitingMetadataUpdateX or completed"/>
                            <dw:transform-message doc:name="Build minimal metadata in XML with briefing ID and title (TODO: check if correct format)">
                                <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
---
{
	MediaHAVEN_external_metadata: {
		MDProperties: {
			// dit is doorzoekbaar
			Algemeen_Briefing_ID @(type:"list"): {
				BriefingID: flowVars.briefing_id			
			},
			Algemeen_Briefing_ID_titel @(type:"list"): {
				(flowVars.briefing_id): flowVars.briefing_title
			}
		}
	}
}]]></dw:set-payload>
                            </dw:transform-message>
                            <object-to-string-transformer doc:name="Object to String"/>
                            <ftp:outbound-endpoint host="${ftpDestination.host}" port="21" path="/vrt" user="${ftpDestination.metadataUsername}" password="${ftpDestination.metadataPassword}" responseTimeout="10000" doc:name="FTP as pid.xml"/>
                            <db:update config-ref="PostgreSQL_CONNECTION" doc:name="Update status vrt_avo_transfer to RECONCILED">
                                <db:parameterized-query><![CDATA[UPDATE ${db.avo_transfer}
SET status = 'RECONCILED'
where id = #[flowVars.id]]]></db:parameterized-query>
                            </db:update>
                        </when>
                        <otherwise>
                            <logger message="Still PROCESSING when not in archived stage and not failed" level="INFO" doc:name="Still PROCESSING when not in archived stage and not failed"/>
                            <choice doc:name="If item is queued or stuck in processing, give it push forward">
                                <when expression="#[!flowVars.buffer_status.equals('queued')&amp;&amp;!flowVars.buffer_status.equals('processing')]]">
                                    <logger level="INFO" doc:name="Do nothing"/>
                                </when>
                                <otherwise>
                                    <db:update config-ref="PostgreSQL_CONNECTION" doc:name="Update status of record in vrt_message_buffer to READY_FOR_PROCESSING">
                                        <db:parameterized-query><![CDATA[UPDATE ${db.buffer}
SET status = 'ready_for_processing'
WHERE id = #[flowVars.correlation_id_buffer]]]></db:parameterized-query>
                                    </db:update>
                                </otherwise>
                            </choice>
                        </otherwise>
                    </choice>
                </when>
                <otherwise>
                    <choice doc:name="Item already manual requested?">
                        <when expression="#[flowVars.transfer_status.equals('REQUESTED')]">
                            <logger level="INFO" doc:name="Item already requested, so do nothing"/>
                        </when>
                        <otherwise>
                            <logger message="Send request to manual_requests component" level="INFO" doc:name="Item not found: send request to manual_requests component TODO"/>
                            <db:update config-ref="PostgreSQL_CONNECTION" doc:name="Update status vrt_avo_transfer to REQUESTED">
                                <db:parameterized-query><![CDATA[UPDATE ${db.avo_transfer}
SET status = 'REQUESTED'
where id = #[flowVars.id]]]></db:parameterized-query>
                            </db:update>
                        </otherwise>
                    </choice>
                </otherwise>
            </choice>
        </foreach>
        <expression-component doc:name="Sleep"><![CDATA[Thread.sleep(30000);]]></expression-component>
        <amqp:outbound-endpoint queueName="vrt_avo_poller" responseTimeout="10000" exchange-pattern="request-response" doc:name="Send to vrt_avo_poller"/>
        <amqp:acknowledge-message doc:name="AMQP-0-9 Acknowledge Message"/>
    </flow>
    <flow name="SetInfo">
        <set-variable variableName="id" value="#[payload.id]" doc:name="Set id"/>
        <set-variable variableName="media_id" value="#[payload['media_id']]" doc:name="Set media_id"/>
        <set-variable variableName="briefing_id" value="#[payload['briefing_id']]" doc:name="Set briefing_id"/>
        <set-variable variableName="transfer_status" value="#[payload['status']]" doc:name="transfer_status"/>
        <set-variable variableName="email" value="#[payload['email']]" doc:name="email"/>
        <set-variable variableName="briefing_title" value="#[payload['briefing_title']]" doc:name="Set briefing_title"/>
        <set-variable variableName="media_type" value="#[payload['media_type']]" doc:name="media_type"/>
        <set-variable variableName="retry_count" value="#[payload['retry_count']]" doc:name="Set retry_count"/>
    </flow>
</mule>
